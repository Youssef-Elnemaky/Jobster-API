openapi: 3.0.0
info:
  title: Jobster API
  version: 1.0.0
  description: Job tracking API with JWT authentication
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
  - url: https://jobster-production.up.railway.app/api/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          minLength: 6
          example: secret123
    UpdateUser:
      type: object
      properties:
        name:
          type: string
          example: Updated Name
        email:
          type: string
          format: email
          example: updated@example.com
        lastName:
          type: string
          example: Smith
        location:
          type: string
          example: New York
    Job:
      type: object
      required:
        - company
        - position
      properties:
        company:
          type: string
          example: Google
        position:
          type: string
          example: Software Engineer
        status:
          type: string
          enum: [interview, declined, pending]
          default: pending
        jobType:
          type: string
          enum: [full-time, part-time, remote, internship]
          default: full-time
        jobLocation:
          type: string
          default: my city
          example: New York
        createdBy:
          type: string
          format: objectid
          example: 507f1f77bcf86cd799439011
    JobListResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        totalJobs:
          type: integer
          example: 75
        numOfPages:
          type: integer
          example: 8
        currentPage:
          type: integer
          example: 1

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Please provide all values

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /auth/updateUser:
    patch:
      tags:
        - Auth
      summary: Update current user's information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /jobs:
    get:
      tags:
        - Jobs
      summary: Get all jobs with filtering, sorting and pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [interview, declined, pending]
          description: Filter by job status
        - in: query
          name: jobType
          schema:
            type: string
            enum: [full-time, part-time, remote, internship]
          description: Filter by job type
        - in: query
          name: search
          schema:
            type: string
          description: Search by position or company
        - in: query
          name: sort
          schema:
            type: string
            enum: [latest, oldest, a-z, z-a]
            default: latest
          description: |
            Sort results:
            - latest: Newest first (-updatedAt)
            - oldest: Oldest first (updatedAt)
            - a-z: Position A-Z (position)
            - z-a: Position Z-A (-position)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: List of filtered/sorted jobs with pagination info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'
        '401':
          description: Unauthorized

    post:
      tags:
        - Jobs
      summary: Create a new job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request

  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: Get single job by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Job not found

    patch:
      tags:
        - Jobs
      summary: Update job by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request

    delete:
      tags:
        - Jobs
      summary: Delete job by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Success! Job removed
        '404':
          description: Job not found

  /jobs/stats:
    get:
      tags:
        - Jobs
      summary: Get job statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Job statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    type: object
                    properties:
                      pending:
                        type: integer
                      interview:
                        type: integer
                      declined:
                        type: integer
                  monthlyApplications:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        count:
                          type: integer